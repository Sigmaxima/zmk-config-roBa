#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt { quick-tap-ms = <300>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_mkp_mb1 {
            bindings = <&mkp MB1>;
            key-positions = <18 19>;
            timeout-ms = <150>;
            layers = <0 4 5>;
        };

        combo_mkb_mb2 {
            bindings = <&mkp MB2>;
            key-positions = <20 19>;
            timeout-ms = <80>;
            layers = <4 5 0>;
            require-prior-idle-ms = <200>;
        };

        combo_mkp_mb3 {
            bindings = <&mkp MB3>;
            key-positions = <18 20>;
            timeout-ms = <150>;
            layers = <0 4 5>;
            require-prior-idle-ms = <200>;
        };

        combo_mkb_mb2_e {
            bindings = <&macro_mkp_mb2_e>;
            key-positions = <20 21>;
            timeout-ms = <150>;
            layers = <4 5>;
        };

        combo_tog_tenkeyslayer {
            bindings = <&tog 6>;
            key-positions = <6 7 8>;
        };

        combo_tog_game_mode {
            bindings = <&tog 8>;
            key-positions = <1 2 3>;
        };

        kp_f2 {
            bindings = <&kp F2>;
            key-positions = <1 0>;
            layers = <0>;
            require-prior-idle-ms = <300>;
        };

        combo_kp_f5 {
            bindings = <&kp F5>;
            key-positions = <5 6>;
            layers = <0>;
            require-prior-idle-ms = <300>;
        };

        combo_kp_f11 {
            bindings = <&kp F11>;
            key-positions = <8 9>;
            layers = <0>;
            require-prior-idle-ms = <300>;
        };

        combo_kp_doublequate {
            bindings = <&kp LS(N2)>;
            key-positions = <14 13>;
            layers = <0>;
        };

        combo_kp_singlequate {
            bindings = <&kp LS(N7)>;
            key-positions = <17 18>;
            layers = <0>;
        };

        combo_kp_quit_apps {
            bindings = <&kp LA(F4)>;
            key-positions = <7 40>;
            layers = <5>;
            timeout-ms = <500>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        macro_emacs_k_cut_to_end: emacs_k {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_SHIFT &kp END &kt LEFT_SHIFT &kp LC(X)>;
            label = "EMACS_K";
        };

        macro_mb1withctrl: mb1withctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt RCTRL &mkp MB1 &kt RCTRL>;
            label = "MB1WITHCTRL";
        };

        macro_mkp_mb2_e: macro_mkp_mb2_e {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB2 &kp E &kp DOWN_ARROW>;
            label = "MACRO_MKP_MB2_E";
        };

        app_explorer: app_explorer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp E &kp X &kp P &kp L &kp O &kp R &kp E &kp R &kp ENTER>;

            label = "APP_EXPLORER";
        };

        app_teams: app_teams {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp M &kp S &kp T &kp E &kp A &kp M &kp S &kp ENTER>;

            label = "APP_TEAMS";
        };

        app_word: app_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp W &kp I &kp N &kp W &kp O &kp R &kp D &kp ENTER>;

            label = "APP_WORD";
        };

        app_excel: app_excel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp E &kp X &kp C &kp E &kp L &kp ENTER>;

            label = "APP_EXCEL";
        };

        app_calculator: app_onenote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp C &kp A &kp L &kp C &kp ENTER>;

            label = "APP_ONENOTE";
        };

        app_onenote: app_calculator {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp O &kp N &kp E &kp N &kp O &kp T &kp E &kp ENTER>;

            label = "APP_CALCULATOR";
        };

        app_edge: app_edge {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp M &kp S &kp E &kp D &kp G &kp E &kp ENTER>;

            label = "APP_EDGE";
        };

        app_powerpoint: app_firefox {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp P &kp O &kp W &kp E &kp R &kp P &kp N &kp T &kp ENTER>;

            label = "APP_FIREFOX";
        };

        app_firefox: app_powerpnt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp F &kp I &kp R &kp E &kp F &kp O &kp X &kp ENTER>;

            label = "APP_POWERPNT";
        };

        app_outlook: app_outlook {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 20>,
                <&kp O &kp U &kp T &kp L &kp O &kp O &kp K &kp ENTER>;

            label = "APP_OUTLOOK";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        macro_emacs: macro_emacs {
            compatible = "zmk,behavior-hold-tap";
            label = "MACRO_EMACS";
            bindings = <&macro_emacs_k_cut_to_end>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            require-prior-idle-ms = <50>;
        };

        scroll_up_down: scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "SCROLL_UP_DOWN";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;
        };

        tap_and_hold: tap_and_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_AND_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        mt_long_press: mt_long_press {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_LONG_PRESS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            retro-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESCAPE Q      &kp W         &kp E         &kp R                             &kp T                                                                           &kp Y                 &kp U  &kp I      &kp O    &kp MINUS
&kp A             &kp S         &kp D         &kp F                             &kp G                   &none                                 &kp LEFT_BRACKET  &kp H                 &kp J  &lt 5 K    &kp L    &mt_long_press RCTRL P
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                             &kp B                   &kp LS(N3)                            &kp LS(MINUS)     &kp N                 &kp M  &kp COMMA  &kp DOT  &mt_long_press RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 2 INTERNATIONAL_5  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 1 INTERNATIONAL_4      &kp BACKSPACE     &lt_to_layer_0 3 RET                             &mt_long_press RCTRL INT1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4  &kp F5                               &app_calculator  &app_explorer  &app_word           &app_excel    &app_powerpoint
&kp F6   &kp F7   &kp F8   &kp F9  &kp F10  &trans      &kp C_PREVIOUS  &kp C_REWIND     &kp C_PP       &kp C_FAST_FORWARD  &kp C_NEXT    &kp C_MUTE
&kp F11  &kp F12  &kp F13  &trans  &trans   &trans      &trans          &app_onenote     &app_teams     &app_outlook        &app_firefox  &app_edge
&trans   &trans   &trans   &trans  &trans   &trans      &trans          &trans                                                            &trans
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION       &kp LS(N2)  &kp HASH              &kp DOLLAR      &kp PERCENT                                   &kp LS(NUMBER_6)   &kp LS(N7)     &kp LS(N8)                    &kp LS(N9)  &mt PRINTSCREEN EQUAL
&kp LC(A)             &kp LC(S)   &kp LS(LEFT_BRACKET)  &kp LS(LC(F))   &kp LS(EQUAL)  &trans             &kp MINUS   &kp LS(SEMICOLON)  &kp SEMICOLON  &macro_emacs 0 RIGHT_BRACKET  &kp NUHS    &kp LS(INTERNATIONAL_3)
&mt LEFT_SHIFT LC(Z)  &kp LC(X)   &kp LC(C)             &kp LC(V)       &kp LC(B)      &kp LG(V)          &kp SLASH   &kp LS(SQT)        &kp SQT        &kp RIGHT_BRACE               &kp PIPE    &kp LS(SLASH)
&trans                &trans      &trans                &kp LEFT_SHIFT  &trans         &kp LS(LC(M))      &kp DELETE  &kp LC(LS(X))                                                               &kp LS(INT1)
            >;

            sensor-bindings = <&inc_dec_kp LC(KP_PLUS) LC(KP_MINUS)>;
        };

        ARROW {
            bindings = <
&mt ESCAPE N1             &kp N2           &kp N3        &kp N4       &kp N5                                        &kp LA(UP_ARROW)  &kp LC(PAGE_UP)  &kp UP_ARROW     &kp LC(PAGE_DOWN)  &kp BACKSPACE
&kp N6                    &kp N7           &kp N8        &kp N9       &kp N0   &trans                &kt PAGE_UP    &kp LC(LEFT)      &kp LEFT         &kp DOWN         &kp RIGHT          &kp LC(RIGHT)
&mt LEFT_SHIFT KP_DIVIDE  &kp KP_ASTERISK  &kp KP_MINUS  &kp KP_PLUS  &kp DOT  &kp LS(MINUS)         &kp PAGE_DOWN  &trans            &kp HOME         &kp RIGHT_SHIFT  &kp END            &kp RIGHT_SHIFT
&trans                    &trans           &trans        &kp LS(TAB)  &kp TAB  &kp LS(CAPSLOCK)      &kp DELETE     &trans                                                                 &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp LC(KP_PLUS) LC(KP_MINUS)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &mkp MB3  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mo 5     &mkp MB2  &kp RCTRL
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &kp RIGHT_SHIFT
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        SCROLL {
            bindings = <
&trans  &kp LG(LS(LEFT))  &kp LG(UP_ARROW)    &kp LG(LS(RIGHT))  &trans                             &kp LG(D)     &kp LC(PAGE_UP)  &none      &kp LC(PAGE_DOWN)  &kp LC(T)
&trans  &kp LG(LEFT)      &kp LG(DOWN_ARROW)  &kp LG(RIGHT)      &trans  &trans      &kp LG(RIGHT)  &kp LG(UP)    &mkp MB1         &trans     &mkp MB2           &kp RIGHT_CONTROL
&trans  &trans            &kp LG(TAB)         &trans             &trans  &mo 7       &kp LG(LEFT)   &kp LG(DOWN)  &mkp MB4         &kp LC(W)  &mkp MB5           &kp RIGHT_SHIFT
&trans  &trans            &trans              &trans             &trans  &trans      &trans         &kp LG(TAB)                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(MINUS) LS(LC(MINUS))>;
        };

        TEN_KEYS {
            bindings = <
&trans  &kp N7  &kp N8   &kp N9  &trans                              &kp LS(EQUAL)      &kp N7  &kp N8  &kp N9  &kp EQUAL
&trans  &kp N4  &kp N5   &kp N6  &kp UP    &trans      &kp MINUS     &kp LS(SEMICOLON)  &kp N4  &kp N5  &kp N7  &trans
&trans  &kp N1  &kp N2   &kp N3  &kp DOWN  &trans      &kp SLASH     &kp LS(SQT)        &kp N1  &kp N2  &kp N3  &kp DOT
&trans  &kp N0  &kp DOT  &trans  &kp TAB   &trans      &kp NUMBER_0  &kp ENTER                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        CONFIG {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                               &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans          &trans       &trans  &trans  &trans  &trans  &trans
&trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &bt BT_CLR      &bootloader  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans        &trans        &trans        &trans        &trans        &trans          &trans       &trans                          &bt BT_CLR_ALL
            >;
        };

        Game {
            bindings = <
&kp CAPS   &kp Q    &kp W         &kp E  &kp R                                 &trans                &trans  &trans  &trans  &trans
&kp TAB    &kp A    &kp S         &kp D  &kp F      &trans      &trans         &trans                &trans  &kp K   &trans  &trans
&kp LSHFT  &kp Z    &kp X         &kp C  &kp V      &kp B       &kp DELETE     &trans                &trans  &trans  &trans  &trans
&kp LCTRL  &kp ESC  &kp LEFT_ALT  &kp G  &kp SPACE  &kp T       &kp BACKSPACE  &lt_to_layer_0 3 RET                          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
    };
};
