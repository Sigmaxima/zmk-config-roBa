#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <300>;
};

&lt { quick-tap-ms = <300>; };

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
            layers = <0>;
            timeout-ms = <70>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <21 20>;
            timeout-ms = <70>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <8 7>;
            layers = <0>;
            timeout-ms = <60>;
        };

        mousebutton1 {
            bindings = <&mkp MB1>;
            key-positions = <18 19>;
        };

        mousebutton2 {
            bindings = <&mkp MB2>;
            key-positions = <20 19>;
        };

        mouselayer {
            bindings = <&tog 4>;
            key-positions = <>;
            layers = <0>;
        };

        henkan {
            bindings = <&kp INTERNATIONAL_4>;
            key-positions = <6 7 8>;
            layers = <0>;
            timeout-ms = <75>;
        };

        muhenkan {
            bindings = <&kp INT_MUHENKAN>;
            key-positions = <1 2 3>;
            layers = <0>;
        };

        tenkeyslayer {
            bindings = <&tog 7>;
            key-positions = <>;
            layers = <0>;
        };

        backspace2 {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19 20>;
            layers = <0>;
        };

        delete2 {
            bindings = <&kp DELETE>;
            key-positions = <13 12 11>;
            layers = <0>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <1 2>;
            layers = <0>;
            timeout-ms = <30>;
        };

        f4 {
            bindings = <&kp F4>;
            key-positions = <3 4>;
            layers = <0>;
            timeout-ms = <30>;
        };

        f6 {
            bindings = <&kp F6>;
            key-positions = <5 6>;
            layers = <0>;
            timeout-ms = <30>;
        };

        leftparenthesis {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <25 24>;
            layers = <0>;
            timeout-ms = <40>;
        };

        rightparenthesis {
            bindings = <&kp NUHS>;
            key-positions = <30 31>;
            layers = <0>;
            timeout-ms = <40>;
        };

        leftbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <14 13>;
            layers = <0>;
            timeout-ms = <40>;
        };

        rightbrace {
            bindings = <&kp PIPE>;
            key-positions = <17 18>;
            layers = <0>;
            timeout-ms = <40>;
        };

        leftbracket {
            bindings = <&kp LS(N8)>;
            key-positions = <2 3>;
            layers = <0>;
            timeout-ms = <40>;
        };

        rightbracket {
            bindings = <&kp LS(N9)>;
            key-positions = <6 7>;
            layers = <0>;
            timeout-ms = <40>;
        };

        space {
            bindings = <&kp INT_MUHENKAN>;
            key-positions = <24 25 23>;
            layers = <0>;
        };

        enter {
            bindings = <&kp INT_HENKAN>;
            key-positions = <30 31 32>;
            layers = <0>;
        };

        space2 {
            bindings = <&kp SPACE>;
            key-positions = <>;
            layers = <0>;
        };

        enter2 {
            bindings = <&kp ENTER>;
            key-positions = <>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "SCROLL_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESCAPE Q      &kp W             &kp E           &kp R                 &kp T                                                                                           &kp Y            &kp U        &lt 5 I    &mt MINUS O        &mt BACKSPACE P
&mt TAB A         &mt LEFT_SHIFT S  &mt LEFT_ALT D  &mt LCTRL F           &kp G                   &none                                 &lt_to_layer_0 1 LEFT_BRACKET     &kp H            &mt RCTRL J  &lt 5 K    &mt RIGHT_SHIFT L  &kp ENTER
&mt LEFT_SHIFT Z  &kp X             &kp C           &kp V                 &kp B                   &kp SEMICOLON                         &kp SQT                           &kp N            &kp M        &kp COMMA  &kp DOT            &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN      &kp LEFT_ALT    &lt_to_layer_0 2 TAB  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 7 INTERNATIONAL_5      &lt_to_layer_0 1 INTERNATIONAL_4  &lt 3 BACKSPACE                                             &mt RCTRL INT1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4  &kp F5                        &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&kp F6   &kp F7   &kp F8   &kp F9  &kp F10  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp F11  &kp F12  &kp F13  &trans  &trans   &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans   &trans   &trans   &trans  &trans   &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp LS(N2)        &kp HASH       &kp DOLLAR     &kp PERCENT                                                 &kp LS(NUMBER_6)   &kp LS(N7)  &kp LS(N8)       &kp LS(N9)  &kp EQUAL
&kp TAB          &kp LEFT_BRACKET  &kp LS(MINUS)  &kp SLASH      &kp LS(SQT)           &trans             &mt CAPS LS(CAPS)  &kp LS(SEMI)       &kp MINUS   &kp SEMICOLON    &kp SQT     &kp INTERNATIONAL_3
&trans           &trans            &trans         &kp LS(EQUAL)  &kp LS(LEFT_BRACKET)  &kp LS(LC(M))      &kp PRINTSCREEN    &kp RIGHT_BRACKET  &kp NUHS    &kp RIGHT_BRACE  &kp PIPE    &kp SLASH
&trans           &trans            &trans         &trans         &trans                &trans             &trans             &kp BACKSPACE                                               &kp INT1
            >;
        };

        ARROW {
            bindings = <
&mt ESCAPE N1             &kp N2           &kp N3        &kp N4       &kp N5                                        &kp LA(UP_ARROW)  &trans    &kp UP_ARROW     &kp MINUS  &kp BACKSPACE
&kp N6                    &kp N7           &kp N8        &kp N9       &kp N0      &trans             &kt PAGE_UP    &kp LC(LEFT)      &kp LEFT  &kp DOWN         &kp RIGHT  &kp LC(RIGHT)
&mt LEFT_SHIFT KP_DIVIDE  &kp KP_ASTERISK  &kp KP_MINUS  &kp KP_PLUS  &kp DOT     &kp LS(MINUS)      &kp PAGE_DOWN  &trans            &kp HOME  &kp RIGHT_SHIFT  &kp END    &kp RIGHT_SHIFT
&trans                    &trans           &trans        &trans       &kp DELETE  &trans             &trans         &trans                                                  &kp DELETE
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &mkp MB3  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mo 5     &mkp MB2  &kp RCTRL
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &kp RIGHT_SHIFT
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        SCROLL {
            bindings = <
&trans  &kp LG(LS(LEFT))  &kp LG(UP_ARROW)    &kp LG(LS(RIGHT))  &trans                      &kp LG(UP_ARROW)  &kp LC(PAGE_UP)  &mkp MB3   &kp LC(PAGE_DOWN)  &none
&trans  &kp LG(LEFT)      &kp LG(DOWN_ARROW)  &kp LG(RIGHT)      &trans  &trans      &trans  &kp LG(DOWN)      &mkp MB1         &trans     &mkp MB2           &kp RIGHT_CONTROL
&trans  &trans            &kp LG(TAB)         &trans             &trans  &trans      &mo 6   &kp LG(TAB)       &mkp MB4         &kp LC(W)  &mkp MB5           &kp RIGHT_SHIFT
&trans  &trans            &trans              &trans             &trans  &trans      &trans  &trans                                                           &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(MINUS) LS(LC(MINUS))>;
        };

        layer_6 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                               &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans          &trans       &trans  &trans  &trans  &trans  &trans
&trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &bt BT_CLR      &bootloader  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans        &trans        &trans        &trans        &trans        &trans          &trans       &trans                          &bt BT_CLR_ALL
            >;
        };

        TEN_KEYS {
            bindings = <
&trans  &trans          &kp UP          &trans     &trans                         &kp LS(APOS)   &kp N7  &kp N8  &kp N9  &kp BACKSPACE
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans      &trans     &kp LS(MINUS)  &kp N4  &kp N5  &kp N7  &kp LS(SEMI)
&trans  &trans          &trans          &trans     &trans  &trans      &kp SLASH  &kp N0         &kp N1  &kp N2  &kp N3  &kp DOT
&trans  &trans          &trans          &trans     &trans  &trans      &trans     &kp N0                                 &kp RETURN
            >;
        };
    };
};
